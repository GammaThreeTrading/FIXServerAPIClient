/* 
 * FIXServer - API
 *
 * Open API for FIXServer integrations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WebHookSubscriptionDetails
    /// </summary>
    [DataContract]
        public partial class WebHookSubscriptionDetails :  IEquatable<WebHookSubscriptionDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebHookSubscriptionDetails" /> class.
        /// </summary>
        /// <param name="webHookId">webHookId.</param>
        /// <param name="instance">instance.</param>
        /// <param name="sessionName">sessionName.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="url">url.</param>
        public WebHookSubscriptionDetails(int? webHookId = default(int?), string instance = default(string), string sessionName = default(string), string eventName = default(string), string url = default(string))
        {
            this.WebHookId = webHookId;
            this.Instance = instance;
            this.SessionName = sessionName;
            this.EventName = eventName;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets WebHookId
        /// </summary>
        [DataMember(Name="webHookId", EmitDefaultValue=false)]
        public int? WebHookId { get; set; }

        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public string Instance { get; set; }

        /// <summary>
        /// Gets or Sets SessionName
        /// </summary>
        [DataMember(Name="sessionName", EmitDefaultValue=false)]
        public string SessionName { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebHookSubscriptionDetails {\n");
            sb.Append("  WebHookId: ").Append(WebHookId).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebHookSubscriptionDetails);
        }

        /// <summary>
        /// Returns true if WebHookSubscriptionDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of WebHookSubscriptionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebHookSubscriptionDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WebHookId == input.WebHookId ||
                    (this.WebHookId != null &&
                    this.WebHookId.Equals(input.WebHookId))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.SessionName == input.SessionName ||
                    (this.SessionName != null &&
                    this.SessionName.Equals(input.SessionName))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WebHookId != null)
                    hashCode = hashCode * 59 + this.WebHookId.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.SessionName != null)
                    hashCode = hashCode * 59 + this.SessionName.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
