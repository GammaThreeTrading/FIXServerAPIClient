/* 
 * FIXServer - API
 *
 * Open API for FIXServer integrations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderCancelRequest
    /// </summary>
    [DataContract]
        public partial class OrderCancelRequest :  IEquatable<OrderCancelRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCancelRequest" /> class.
        /// </summary>
        /// <param name="externalId">externalId.</param>
        /// <param name="newOrderSingleId">newOrderSingleId.</param>
        /// <param name="clOrdId">clOrdId.</param>
        /// <param name="tif">tif.</param>
        /// <param name="ordType">ordType.</param>
        /// <param name="price">price.</param>
        /// <param name="price2">price2.</param>
        /// <param name="xtraTags">xtraTags.</param>
        public OrderCancelRequest(string externalId = default(string), int? newOrderSingleId = default(int?), string clOrdId = default(string), string tif = default(string), string ordType = default(string), double? price = default(double?), double? price2 = default(double?), List<Xtags> xtraTags = default(List<Xtags>))
        {
            this.ExternalId = externalId;
            this.NewOrderSingleId = newOrderSingleId;
            this.ClOrdId = clOrdId;
            this.Tif = tif;
            this.OrdType = ordType;
            this.Price = price;
            this.Price2 = price2;
            this.XtraTags = xtraTags;
        }
        
        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets NewOrderSingleId
        /// </summary>
        [DataMember(Name="newOrderSingleId", EmitDefaultValue=false)]
        public int? NewOrderSingleId { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdId
        /// </summary>
        [DataMember(Name="clOrdId", EmitDefaultValue=false)]
        public string ClOrdId { get; set; }

        /// <summary>
        /// Gets or Sets Tif
        /// </summary>
        [DataMember(Name="tif", EmitDefaultValue=false)]
        public string Tif { get; set; }

        /// <summary>
        /// Gets or Sets OrdType
        /// </summary>
        [DataMember(Name="ordType", EmitDefaultValue=false)]
        public string OrdType { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Price2
        /// </summary>
        [DataMember(Name="price2", EmitDefaultValue=false)]
        public double? Price2 { get; set; }

        /// <summary>
        /// Gets or Sets XtraTags
        /// </summary>
        [DataMember(Name="xtraTags", EmitDefaultValue=false)]
        public List<Xtags> XtraTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCancelRequest {\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  NewOrderSingleId: ").Append(NewOrderSingleId).Append("\n");
            sb.Append("  ClOrdId: ").Append(ClOrdId).Append("\n");
            sb.Append("  Tif: ").Append(Tif).Append("\n");
            sb.Append("  OrdType: ").Append(OrdType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Price2: ").Append(Price2).Append("\n");
            sb.Append("  XtraTags: ").Append(XtraTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCancelRequest);
        }

        /// <summary>
        /// Returns true if OrderCancelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCancelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCancelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.NewOrderSingleId == input.NewOrderSingleId ||
                    (this.NewOrderSingleId != null &&
                    this.NewOrderSingleId.Equals(input.NewOrderSingleId))
                ) && 
                (
                    this.ClOrdId == input.ClOrdId ||
                    (this.ClOrdId != null &&
                    this.ClOrdId.Equals(input.ClOrdId))
                ) && 
                (
                    this.Tif == input.Tif ||
                    (this.Tif != null &&
                    this.Tif.Equals(input.Tif))
                ) && 
                (
                    this.OrdType == input.OrdType ||
                    (this.OrdType != null &&
                    this.OrdType.Equals(input.OrdType))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Price2 == input.Price2 ||
                    (this.Price2 != null &&
                    this.Price2.Equals(input.Price2))
                ) && 
                (
                    this.XtraTags == input.XtraTags ||
                    this.XtraTags != null &&
                    input.XtraTags != null &&
                    this.XtraTags.SequenceEqual(input.XtraTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.NewOrderSingleId != null)
                    hashCode = hashCode * 59 + this.NewOrderSingleId.GetHashCode();
                if (this.ClOrdId != null)
                    hashCode = hashCode * 59 + this.ClOrdId.GetHashCode();
                if (this.Tif != null)
                    hashCode = hashCode * 59 + this.Tif.GetHashCode();
                if (this.OrdType != null)
                    hashCode = hashCode * 59 + this.OrdType.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Price2 != null)
                    hashCode = hashCode * 59 + this.Price2.GetHashCode();
                if (this.XtraTags != null)
                    hashCode = hashCode * 59 + this.XtraTags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
