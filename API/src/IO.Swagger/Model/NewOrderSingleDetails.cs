/* 
 * FIXServer - API
 *
 * Open API for FIXServer integrations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NewOrderSingleDetails
    /// </summary>
    [DataContract]
        public partial class NewOrderSingleDetails :  IEquatable<NewOrderSingleDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewOrderSingleDetails" /> class.
        /// </summary>
        /// <param name="newOrderSingleId">newOrderSingleId.</param>
        /// <param name="instance">instance.</param>
        /// <param name="sessionName">sessionName.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="clOrdId">clOrdId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="side">side.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="ordType">ordType.</param>
        /// <param name="price">price.</param>
        /// <param name="price2">price2.</param>
        /// <param name="fixMessage">fixMessage.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="vmOrdStatus">vmOrdStatus.</param>
        /// <param name="vmQtyExecuted">vmQtyExecuted.</param>
        /// <param name="vmAvgPx">vmAvgPx.</param>
        /// <param name="vmLeavesQty">vmLeavesQty.</param>
        /// <param name="vmLastUpdate">vmLastUpdate.</param>
        public NewOrderSingleDetails(int? newOrderSingleId = default(int?), string instance = default(string), string sessionName = default(string), string externalId = default(string), string clOrdId = default(string), string symbol = default(string), string side = default(string), double? quantity = default(double?), string ordType = default(string), double? price = default(double?), double? price2 = default(double?), string fixMessage = default(string), DateTime? createdDate = default(DateTime?), string vmOrdStatus = default(string), double? vmQtyExecuted = default(double?), double? vmAvgPx = default(double?), double? vmLeavesQty = default(double?), DateTime? vmLastUpdate = default(DateTime?))
        {
            this.NewOrderSingleId = newOrderSingleId;
            this.Instance = instance;
            this.SessionName = sessionName;
            this.ExternalId = externalId;
            this.ClOrdId = clOrdId;
            this.Symbol = symbol;
            this.Side = side;
            this.Quantity = quantity;
            this.OrdType = ordType;
            this.Price = price;
            this.Price2 = price2;
            this.FixMessage = fixMessage;
            this.CreatedDate = createdDate;
            this.VmOrdStatus = vmOrdStatus;
            this.VmQtyExecuted = vmQtyExecuted;
            this.VmAvgPx = vmAvgPx;
            this.VmLeavesQty = vmLeavesQty;
            this.VmLastUpdate = vmLastUpdate;
        }
        
        /// <summary>
        /// Gets or Sets NewOrderSingleId
        /// </summary>
        [DataMember(Name="newOrderSingleId", EmitDefaultValue=false)]
        public int? NewOrderSingleId { get; set; }

        /// <summary>
        /// Gets or Sets Instance
        /// </summary>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public string Instance { get; set; }

        /// <summary>
        /// Gets or Sets SessionName
        /// </summary>
        [DataMember(Name="sessionName", EmitDefaultValue=false)]
        public string SessionName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets ClOrdId
        /// </summary>
        [DataMember(Name="clOrdId", EmitDefaultValue=false)]
        public string ClOrdId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets OrdType
        /// </summary>
        [DataMember(Name="ordType", EmitDefaultValue=false)]
        public string OrdType { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Price2
        /// </summary>
        [DataMember(Name="price2", EmitDefaultValue=false)]
        public double? Price2 { get; set; }

        /// <summary>
        /// Gets or Sets FixMessage
        /// </summary>
        [DataMember(Name="fixMessage", EmitDefaultValue=false)]
        public string FixMessage { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets VmOrdStatus
        /// </summary>
        [DataMember(Name="vmOrdStatus", EmitDefaultValue=false)]
        public string VmOrdStatus { get; set; }

        /// <summary>
        /// Gets or Sets VmQtyExecuted
        /// </summary>
        [DataMember(Name="vmQtyExecuted", EmitDefaultValue=false)]
        public double? VmQtyExecuted { get; set; }

        /// <summary>
        /// Gets or Sets VmAvgPx
        /// </summary>
        [DataMember(Name="vmAvgPx", EmitDefaultValue=false)]
        public double? VmAvgPx { get; set; }

        /// <summary>
        /// Gets or Sets VmLeavesQty
        /// </summary>
        [DataMember(Name="vmLeavesQty", EmitDefaultValue=false)]
        public double? VmLeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets VmLastUpdate
        /// </summary>
        [DataMember(Name="vmLastUpdate", EmitDefaultValue=false)]
        public DateTime? VmLastUpdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewOrderSingleDetails {\n");
            sb.Append("  NewOrderSingleId: ").Append(NewOrderSingleId).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ClOrdId: ").Append(ClOrdId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  OrdType: ").Append(OrdType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Price2: ").Append(Price2).Append("\n");
            sb.Append("  FixMessage: ").Append(FixMessage).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  VmOrdStatus: ").Append(VmOrdStatus).Append("\n");
            sb.Append("  VmQtyExecuted: ").Append(VmQtyExecuted).Append("\n");
            sb.Append("  VmAvgPx: ").Append(VmAvgPx).Append("\n");
            sb.Append("  VmLeavesQty: ").Append(VmLeavesQty).Append("\n");
            sb.Append("  VmLastUpdate: ").Append(VmLastUpdate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewOrderSingleDetails);
        }

        /// <summary>
        /// Returns true if NewOrderSingleDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of NewOrderSingleDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewOrderSingleDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewOrderSingleId == input.NewOrderSingleId ||
                    (this.NewOrderSingleId != null &&
                    this.NewOrderSingleId.Equals(input.NewOrderSingleId))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.SessionName == input.SessionName ||
                    (this.SessionName != null &&
                    this.SessionName.Equals(input.SessionName))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ClOrdId == input.ClOrdId ||
                    (this.ClOrdId != null &&
                    this.ClOrdId.Equals(input.ClOrdId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.OrdType == input.OrdType ||
                    (this.OrdType != null &&
                    this.OrdType.Equals(input.OrdType))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Price2 == input.Price2 ||
                    (this.Price2 != null &&
                    this.Price2.Equals(input.Price2))
                ) && 
                (
                    this.FixMessage == input.FixMessage ||
                    (this.FixMessage != null &&
                    this.FixMessage.Equals(input.FixMessage))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.VmOrdStatus == input.VmOrdStatus ||
                    (this.VmOrdStatus != null &&
                    this.VmOrdStatus.Equals(input.VmOrdStatus))
                ) && 
                (
                    this.VmQtyExecuted == input.VmQtyExecuted ||
                    (this.VmQtyExecuted != null &&
                    this.VmQtyExecuted.Equals(input.VmQtyExecuted))
                ) && 
                (
                    this.VmAvgPx == input.VmAvgPx ||
                    (this.VmAvgPx != null &&
                    this.VmAvgPx.Equals(input.VmAvgPx))
                ) && 
                (
                    this.VmLeavesQty == input.VmLeavesQty ||
                    (this.VmLeavesQty != null &&
                    this.VmLeavesQty.Equals(input.VmLeavesQty))
                ) && 
                (
                    this.VmLastUpdate == input.VmLastUpdate ||
                    (this.VmLastUpdate != null &&
                    this.VmLastUpdate.Equals(input.VmLastUpdate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewOrderSingleId != null)
                    hashCode = hashCode * 59 + this.NewOrderSingleId.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.SessionName != null)
                    hashCode = hashCode * 59 + this.SessionName.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ClOrdId != null)
                    hashCode = hashCode * 59 + this.ClOrdId.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.OrdType != null)
                    hashCode = hashCode * 59 + this.OrdType.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Price2 != null)
                    hashCode = hashCode * 59 + this.Price2.GetHashCode();
                if (this.FixMessage != null)
                    hashCode = hashCode * 59 + this.FixMessage.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.VmOrdStatus != null)
                    hashCode = hashCode * 59 + this.VmOrdStatus.GetHashCode();
                if (this.VmQtyExecuted != null)
                    hashCode = hashCode * 59 + this.VmQtyExecuted.GetHashCode();
                if (this.VmAvgPx != null)
                    hashCode = hashCode * 59 + this.VmAvgPx.GetHashCode();
                if (this.VmLeavesQty != null)
                    hashCode = hashCode * 59 + this.VmLeavesQty.GetHashCode();
                if (this.VmLastUpdate != null)
                    hashCode = hashCode * 59 + this.VmLastUpdate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
