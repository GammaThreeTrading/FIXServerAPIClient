/* 
 * FIXServer - API
 *
 * Open API for FIXServer integrations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SessionInfo
    /// </summary>
    [DataContract]
        public partial class SessionInfo :  IEquatable<SessionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionInfo" /> class.
        /// </summary>
        /// <param name="sessionName">sessionName.</param>
        /// <param name="fixVersion">fixVersion.</param>
        /// <param name="senderCompId">senderCompId.</param>
        /// <param name="targetCompId">targetCompId.</param>
        /// <param name="isEnabled">isEnabled.</param>
        /// <param name="isLoggedOn">isLoggedOn.</param>
        /// <param name="isAcceptor">isAcceptor.</param>
        /// <param name="isSessionTime">isSessionTime.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="port">port.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="timeZone">timeZone.</param>
        /// <param name="appDataDictionary">appDataDictionary.</param>
        /// <param name="sendingSeqNum">sendingSeqNum.</param>
        /// <param name="rcvdSeqNum">rcvdSeqNum.</param>
        public SessionInfo(string sessionName = default(string), string fixVersion = default(string), string senderCompId = default(string), string targetCompId = default(string), bool? isEnabled = default(bool?), bool? isLoggedOn = default(bool?), bool? isAcceptor = default(bool?), bool? isSessionTime = default(bool?), string ipAddress = default(string), int? port = default(int?), string startTime = default(string), string endTime = default(string), string timeZone = default(string), string appDataDictionary = default(string), int? sendingSeqNum = default(int?), int? rcvdSeqNum = default(int?))
        {
            this.SessionName = sessionName;
            this.FixVersion = fixVersion;
            this.SenderCompId = senderCompId;
            this.TargetCompId = targetCompId;
            this.IsEnabled = isEnabled;
            this.IsLoggedOn = isLoggedOn;
            this.IsAcceptor = isAcceptor;
            this.IsSessionTime = isSessionTime;
            this.IpAddress = ipAddress;
            this.Port = port;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.TimeZone = timeZone;
            this.AppDataDictionary = appDataDictionary;
            this.SendingSeqNum = sendingSeqNum;
            this.RcvdSeqNum = rcvdSeqNum;
        }
        
        /// <summary>
        /// Gets or Sets SessionName
        /// </summary>
        [DataMember(Name="sessionName", EmitDefaultValue=false)]
        public string SessionName { get; set; }

        /// <summary>
        /// Gets or Sets FixVersion
        /// </summary>
        [DataMember(Name="fixVersion", EmitDefaultValue=false)]
        public string FixVersion { get; set; }

        /// <summary>
        /// Gets or Sets SenderCompId
        /// </summary>
        [DataMember(Name="senderCompId", EmitDefaultValue=false)]
        public string SenderCompId { get; set; }

        /// <summary>
        /// Gets or Sets TargetCompId
        /// </summary>
        [DataMember(Name="targetCompId", EmitDefaultValue=false)]
        public string TargetCompId { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsLoggedOn
        /// </summary>
        [DataMember(Name="isLoggedOn", EmitDefaultValue=false)]
        public bool? IsLoggedOn { get; set; }

        /// <summary>
        /// Gets or Sets IsAcceptor
        /// </summary>
        [DataMember(Name="isAcceptor", EmitDefaultValue=false)]
        public bool? IsAcceptor { get; set; }

        /// <summary>
        /// Gets or Sets IsSessionTime
        /// </summary>
        [DataMember(Name="isSessionTime", EmitDefaultValue=false)]
        public bool? IsSessionTime { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name="timeZone", EmitDefaultValue=false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets AppDataDictionary
        /// </summary>
        [DataMember(Name="appDataDictionary", EmitDefaultValue=false)]
        public string AppDataDictionary { get; set; }

        /// <summary>
        /// Gets or Sets SendingSeqNum
        /// </summary>
        [DataMember(Name="sendingSeqNum", EmitDefaultValue=false)]
        public int? SendingSeqNum { get; set; }

        /// <summary>
        /// Gets or Sets RcvdSeqNum
        /// </summary>
        [DataMember(Name="rcvdSeqNum", EmitDefaultValue=false)]
        public int? RcvdSeqNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionInfo {\n");
            sb.Append("  SessionName: ").Append(SessionName).Append("\n");
            sb.Append("  FixVersion: ").Append(FixVersion).Append("\n");
            sb.Append("  SenderCompId: ").Append(SenderCompId).Append("\n");
            sb.Append("  TargetCompId: ").Append(TargetCompId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsLoggedOn: ").Append(IsLoggedOn).Append("\n");
            sb.Append("  IsAcceptor: ").Append(IsAcceptor).Append("\n");
            sb.Append("  IsSessionTime: ").Append(IsSessionTime).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  AppDataDictionary: ").Append(AppDataDictionary).Append("\n");
            sb.Append("  SendingSeqNum: ").Append(SendingSeqNum).Append("\n");
            sb.Append("  RcvdSeqNum: ").Append(RcvdSeqNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionInfo);
        }

        /// <summary>
        /// Returns true if SessionInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SessionName == input.SessionName ||
                    (this.SessionName != null &&
                    this.SessionName.Equals(input.SessionName))
                ) && 
                (
                    this.FixVersion == input.FixVersion ||
                    (this.FixVersion != null &&
                    this.FixVersion.Equals(input.FixVersion))
                ) && 
                (
                    this.SenderCompId == input.SenderCompId ||
                    (this.SenderCompId != null &&
                    this.SenderCompId.Equals(input.SenderCompId))
                ) && 
                (
                    this.TargetCompId == input.TargetCompId ||
                    (this.TargetCompId != null &&
                    this.TargetCompId.Equals(input.TargetCompId))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                ) && 
                (
                    this.IsLoggedOn == input.IsLoggedOn ||
                    (this.IsLoggedOn != null &&
                    this.IsLoggedOn.Equals(input.IsLoggedOn))
                ) && 
                (
                    this.IsAcceptor == input.IsAcceptor ||
                    (this.IsAcceptor != null &&
                    this.IsAcceptor.Equals(input.IsAcceptor))
                ) && 
                (
                    this.IsSessionTime == input.IsSessionTime ||
                    (this.IsSessionTime != null &&
                    this.IsSessionTime.Equals(input.IsSessionTime))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.AppDataDictionary == input.AppDataDictionary ||
                    (this.AppDataDictionary != null &&
                    this.AppDataDictionary.Equals(input.AppDataDictionary))
                ) && 
                (
                    this.SendingSeqNum == input.SendingSeqNum ||
                    (this.SendingSeqNum != null &&
                    this.SendingSeqNum.Equals(input.SendingSeqNum))
                ) && 
                (
                    this.RcvdSeqNum == input.RcvdSeqNum ||
                    (this.RcvdSeqNum != null &&
                    this.RcvdSeqNum.Equals(input.RcvdSeqNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SessionName != null)
                    hashCode = hashCode * 59 + this.SessionName.GetHashCode();
                if (this.FixVersion != null)
                    hashCode = hashCode * 59 + this.FixVersion.GetHashCode();
                if (this.SenderCompId != null)
                    hashCode = hashCode * 59 + this.SenderCompId.GetHashCode();
                if (this.TargetCompId != null)
                    hashCode = hashCode * 59 + this.TargetCompId.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                if (this.IsLoggedOn != null)
                    hashCode = hashCode * 59 + this.IsLoggedOn.GetHashCode();
                if (this.IsAcceptor != null)
                    hashCode = hashCode * 59 + this.IsAcceptor.GetHashCode();
                if (this.IsSessionTime != null)
                    hashCode = hashCode * 59 + this.IsSessionTime.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.AppDataDictionary != null)
                    hashCode = hashCode * 59 + this.AppDataDictionary.GetHashCode();
                if (this.SendingSeqNum != null)
                    hashCode = hashCode * 59 + this.SendingSeqNum.GetHashCode();
                if (this.RcvdSeqNum != null)
                    hashCode = hashCode * 59 + this.RcvdSeqNum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
