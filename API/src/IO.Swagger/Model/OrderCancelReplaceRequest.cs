/* 
 * FIXServer - API
 *
 * Open API for FIXServer integrations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OrderCancelReplaceRequest
    /// </summary>
    [DataContract]
        public partial class OrderCancelReplaceRequest :  IEquatable<OrderCancelReplaceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderCancelReplaceRequest" /> class.
        /// </summary>
        /// <param name="newOrderSingleId">newOrderSingleId.</param>
        /// <param name="externalOrderId">externalOrderId.</param>
        /// <param name="newOrderQty">newOrderQty.</param>
        /// <param name="newPrice">newPrice.</param>
        /// <param name="newPrice2">newPrice2.</param>
        /// <param name="newOrdType">newOrdType.</param>
        /// <param name="xtraTags">xtraTags.</param>
        public OrderCancelReplaceRequest(int? newOrderSingleId = default(int?), string externalOrderId = default(string), double? newOrderQty = default(double?), double? newPrice = default(double?), double? newPrice2 = default(double?), string newOrdType = default(string), List<Xtags> xtraTags = default(List<Xtags>))
        {
            this.NewOrderSingleId = newOrderSingleId;
            this.ExternalOrderId = externalOrderId;
            this.NewOrderQty = newOrderQty;
            this.NewPrice = newPrice;
            this.NewPrice2 = newPrice2;
            this.NewOrdType = newOrdType;
            this.XtraTags = xtraTags;
        }
        
        /// <summary>
        /// Gets or Sets NewOrderSingleId
        /// </summary>
        [DataMember(Name="newOrderSingleId", EmitDefaultValue=false)]
        public int? NewOrderSingleId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalOrderId
        /// </summary>
        [DataMember(Name="externalOrderId", EmitDefaultValue=false)]
        public string ExternalOrderId { get; set; }

        /// <summary>
        /// Gets or Sets NewOrderQty
        /// </summary>
        [DataMember(Name="newOrderQty", EmitDefaultValue=false)]
        public double? NewOrderQty { get; set; }

        /// <summary>
        /// Gets or Sets NewPrice
        /// </summary>
        [DataMember(Name="newPrice", EmitDefaultValue=false)]
        public double? NewPrice { get; set; }

        /// <summary>
        /// Gets or Sets NewPrice2
        /// </summary>
        [DataMember(Name="newPrice2", EmitDefaultValue=false)]
        public double? NewPrice2 { get; set; }

        /// <summary>
        /// Gets or Sets NewOrdType
        /// </summary>
        [DataMember(Name="newOrdType", EmitDefaultValue=false)]
        public string NewOrdType { get; set; }

        /// <summary>
        /// Gets or Sets XtraTags
        /// </summary>
        [DataMember(Name="xtraTags", EmitDefaultValue=false)]
        public List<Xtags> XtraTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderCancelReplaceRequest {\n");
            sb.Append("  NewOrderSingleId: ").Append(NewOrderSingleId).Append("\n");
            sb.Append("  ExternalOrderId: ").Append(ExternalOrderId).Append("\n");
            sb.Append("  NewOrderQty: ").Append(NewOrderQty).Append("\n");
            sb.Append("  NewPrice: ").Append(NewPrice).Append("\n");
            sb.Append("  NewPrice2: ").Append(NewPrice2).Append("\n");
            sb.Append("  NewOrdType: ").Append(NewOrdType).Append("\n");
            sb.Append("  XtraTags: ").Append(XtraTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderCancelReplaceRequest);
        }

        /// <summary>
        /// Returns true if OrderCancelReplaceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderCancelReplaceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderCancelReplaceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NewOrderSingleId == input.NewOrderSingleId ||
                    (this.NewOrderSingleId != null &&
                    this.NewOrderSingleId.Equals(input.NewOrderSingleId))
                ) && 
                (
                    this.ExternalOrderId == input.ExternalOrderId ||
                    (this.ExternalOrderId != null &&
                    this.ExternalOrderId.Equals(input.ExternalOrderId))
                ) && 
                (
                    this.NewOrderQty == input.NewOrderQty ||
                    (this.NewOrderQty != null &&
                    this.NewOrderQty.Equals(input.NewOrderQty))
                ) && 
                (
                    this.NewPrice == input.NewPrice ||
                    (this.NewPrice != null &&
                    this.NewPrice.Equals(input.NewPrice))
                ) && 
                (
                    this.NewPrice2 == input.NewPrice2 ||
                    (this.NewPrice2 != null &&
                    this.NewPrice2.Equals(input.NewPrice2))
                ) && 
                (
                    this.NewOrdType == input.NewOrdType ||
                    (this.NewOrdType != null &&
                    this.NewOrdType.Equals(input.NewOrdType))
                ) && 
                (
                    this.XtraTags == input.XtraTags ||
                    this.XtraTags != null &&
                    input.XtraTags != null &&
                    this.XtraTags.SequenceEqual(input.XtraTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewOrderSingleId != null)
                    hashCode = hashCode * 59 + this.NewOrderSingleId.GetHashCode();
                if (this.ExternalOrderId != null)
                    hashCode = hashCode * 59 + this.ExternalOrderId.GetHashCode();
                if (this.NewOrderQty != null)
                    hashCode = hashCode * 59 + this.NewOrderQty.GetHashCode();
                if (this.NewPrice != null)
                    hashCode = hashCode * 59 + this.NewPrice.GetHashCode();
                if (this.NewPrice2 != null)
                    hashCode = hashCode * 59 + this.NewPrice2.GetHashCode();
                if (this.NewOrdType != null)
                    hashCode = hashCode * 59 + this.NewOrdType.GetHashCode();
                if (this.XtraTags != null)
                    hashCode = hashCode * 59 + this.XtraTags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
